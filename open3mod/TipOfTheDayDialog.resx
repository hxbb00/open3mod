<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBoxTipPic.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AEW67v/PWgoY8/w9vQAAAABJRU5ErkJggg==
</value>
  </data>
</root>